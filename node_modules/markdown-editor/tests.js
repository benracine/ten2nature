var assert = require('assert');

var getBoundsOfChange = require('./index.js').getBoundsOfChange;
var markdownToHTML = require('./index.js').markdownToHTML;
var insertMarkdownSeparatorLines = require('./index.js').insertMarkdownSeparatorLines;

describe('getBoundsOfChange', function() {
  [
    ['ins', 'testingtesting', 'testingBLAHBLAHBLAHtesting', 7, 19],
    ['del', 'testingtesting', 'testesting', 4, 4],
    ['shared', 'abctestdef', 'abctesttestdef', 7, 11],
    ['shared2', 'testtest', 'test', 4, 4],
    ['equal', 'testingtesting', 'testingtesting', 14, 14],
    ['empty_new', 'testingtesting', '', 0, 0],
    ['empty_orig', '', 'testingtesting', 0, 14],
    ['empty_both', '', '', 0, 0]
  ].forEach(function(row) {
    test.apply(null, row)
  });

  function test(spec, orig_text, new_text, start, end) {
    it(spec, function() {
      var output = getBoundsOfChange(orig_text, new_text);
      assert.equal(output.start, start);
      assert.equal(output.end, end);
    });
  }
});

describe('markdownToHTML', function() {
  var input = [
    '2. two',
    '    a.',
    '    b.',
    '    c.',
    '3. three',
    '    i.  ',
    '    ii.',
    '    iii'
  ].join('\n');

  var expected = ['<ol>',
    '<li value="2">two<br> a.<br> b.<br> c.</li>',
    '<li value="3">three<ol>',
    '<li value="1">ii.<br>iii</li>',
    '</ol>',
    '</li>',
    '</ol>',
  ].join('\n');

  assert.equal(markdownToHTML(input).trim(), expected.trim());
});

describe('insert word line separators', function() {
  var line_break = '\n',
    no_tabs = 'outside table\n',
    two_tabs = 'TableCell1\tTableCell2\n',
    three_tabs = 'TableCell1\tTableCell2\tTableCell3\n';

  it('should insert a line separator between lists', function() {
    var input = 'NonList Item1\n' + 
                '1.\titem1\n' + 
                '2.\titem2\n' + 
                '3.\titem3\n';
    var output = insertMarkdownSeparatorLines(input);
    assert.equal(output, 'NonList Item1\n\n' + 
                '1.\titem1\n' + 
                '2.\titem2\n' + 
                '3.\titem3\n');
  });

  it('should insert a line separator between tables', function() {
    var output = insertMarkdownSeparatorLines(no_tabs + three_tabs + three_tabs + no_tabs);
    assert.equal(output, no_tabs + line_break + three_tabs + three_tabs + line_break + no_tabs);
  });

  it('should not insert a line when the number of tabs does not match', function() {
    var output = insertMarkdownSeparatorLines(no_tabs + two_tabs + three_tabs + no_tabs);
    assert.equal(output, no_tabs + two_tabs + three_tabs + no_tabs);
  });

  it('should not insert a line with a single row with tabs', function() {
    var output = insertMarkdownSeparatorLines(no_tabs + two_tabs + no_tabs);
    assert.equal(output, no_tabs + two_tabs + no_tabs);
  });

  it('should insert a line with two adjacent with same number of tabs, one without', function() {
    var output = insertMarkdownSeparatorLines(no_tabs + two_tabs + two_tabs + three_tabs + no_tabs);
    assert.equal(output, no_tabs + line_break + two_tabs + two_tabs + line_break + three_tabs + no_tabs);
  });

  it('should not insert a line between normal lines', function() {
    var output = insertMarkdownSeparatorLines(no_tabs + no_tabs + no_tabs);
    assert.equal(output, no_tabs + no_tabs + no_tabs);
  });

  it('should insert a line break when the table is at the end of the text', function() {
    var output = insertMarkdownSeparatorLines(no_tabs + two_tabs + two_tabs);
    assert.equal(output, no_tabs + line_break + two_tabs + two_tabs + line_break);
  });
});
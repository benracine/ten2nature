(function(root) {
var _ = root._ || require('underscore');
if (!_.str)
  _.str = require('underscore.string');

simpleTables.SPACES_BTWN_COLS = 1;
simpleTables.TAB_SIZE = 8;

function simpleTables(str) {
  str = str.replace(/\r\n|\r/g, '\n')
    .replace(/\u00a0/g, ' ')
    .replace(/\u2424/g, '\n');
  
  var sections = str.split(/\n\s*\n/);
  sections.forEach(function(section, i) {
    var lines = section.replace(/(^\n+|\n+$)/g, '').split('\n');
    if (lines.length < 2)
      return;

    lines = expandTabs(lines);
    var cols = getColumns(lines);
    if (cols && isTable(cols, lines))
      sections[i] = simpleTable(cols, lines);
  });
  return sections.join('\n\n');
}

function expandTabs(lines) {
  return lines.map(function(line) {
    var ix_offset = 0;
    return line.replace(/\t/g, function(match, ix) {
      var num_spaces = simpleTables.TAB_SIZE - ((ix + ix_offset) % simpleTables.TAB_SIZE);
      ix_offset += num_spaces - 1;
      return _.str.repeat(' ', num_spaces);
    });
  });
}

function getColumns(lines) {
  var header = lines[0];
  
  // we can't use word boundaries b/c col headings can be non-words, like "#"
  var col_break = /\s\s(?=\S)/g; // *assumes* simpleTables.SPACES_BTWN_COLS = 1
  var col_widths = _.pluck(header.split(col_break), 'length');

  // col_break eats 1 whitespace char on all but the last col; add it back
  col_widths = col_widths.map(function(col_width, i) {
    if (i == col_widths.length - 1)
      return col_width;
    else
      return col_width + 1;
  });

  // expand last col_width to longest line
  if (col_widths.length)
    col_widths[col_widths.length - 1] += _.max(_.pluck(lines, 'length')) - header.length;
  return col_widths;
}

function isTable(cols, lines) {
  var is_table = cols.length >= 2;
  if (isList(cols, lines))
    return false;

  var col_pos = 0;
  cols.forEach(function(col_width, i) {
    col_pos += col_width;
    lines.forEach(function(line) {
      if (line.length > col_pos && !/\s/.test(line[col_pos]))
        is_table = false;
    });
    col_pos += simpleTables.SPACES_BTWN_COLS;
  });
  
  return is_table;
}

function isList(cols, lines) {
  return cols.length == 2
    && lines[0].slice(0, cols[0]).match(/^\w\.\s*$/);
}

function simpleTable(col_widths, lines) {
  lines = lines.map(function(line) {
    var line_arr = col_widths.map(function(col_width) {
      var cell_contents = line.slice(0, col_width);
      line = line.slice(col_width + simpleTables.SPACES_BTWN_COLS);
      return cell_contents;
    });

    line_arr = line_arr.map(function(cell_contents, i) {
      return _.str.rpad(cell_contents, col_widths[i]);
    });

    return '| ' + line_arr.join(' | ') + ' |';
  });

  var dashes = col_widths.map(function(col_width) {
    return _.str.repeat('-', col_width);
  });
  lines.splice(1, 0, '| ' + dashes.join(' | ') + ' |');

  return lines.join('\n');
}

function alignColumns(str) {
  var sections = str.split(/\n\s*\n/);
  sections = sections.map(function(section, index) {
    var lines = section.trim().split('\n');

    if (!isTSV(lines))
      return section;

    var result = alignTSV(lines);
    if (index == 0)
      result = '\n\n' + result;

    if (index == sections.length - 1)
      result = result + '\n\n';

    return result;
  });
  return sections.join('\n\n');
}

function isTSV(lines) {
  var num_tabs_per_line = null;
  var is_tsv = lines.length > 1;

  lines.forEach(function(line) {
    var num_tabs = numTabs(line);
    if (!num_tabs)
      is_tsv = false;
    if (num_tabs_per_line == null)
      num_tabs_per_line = num_tabs;
    else if (num_tabs > num_tabs_per_line)
      is_tsv = false;
  });

  return is_tsv;
}

function numTabs(line) {
  var tab = /\t/g;
  var result, num_tabs = 0;
  while (result = tab.exec(line))
    num_tabs++;
  return num_tabs;
}

function alignTSV(lines) {
  var max_lengths = [];
  lines.forEach(function(line) {
    line.split('\t').forEach(function(col, i) {
      var max_len = max_lengths[i];
      if (max_len == null)
        max_lengths[i] = col.length + 1; // header columns must have at least 2 spaces between cols
      else if (max_len < col.length)
        max_lengths[i] = col.length;
    });
  });
  
  lines.forEach(function(line, j) {
    var cols = line.split('\t');
    cols.forEach(function(col, i) {
      if (i == cols.length - 1)
        return;

      var target_len = max_lengths[i] + 1; // need at least 1 space btwn cols
      var first_tab_len = simpleTables.TAB_SIZE - (col.length % simpleTables.TAB_SIZE);
      var num_tabs = Math.ceil((target_len - (col.length + first_tab_len)) / simpleTables.TAB_SIZE);

      col += '\t';
      for (var n = 0; n < num_tabs; ++n)
        col += '\t';
      
      cols[i] = col;
    });
    lines[j] = cols.join('');
  });
  return lines.join('\n');
}

function sum(arr) { 
  return _.reduce(arr, function(memo, num) {
    return memo + num;
  }, 0);
}

simpleTables.alignColumns = alignColumns;
simpleTables.expandTabs = expandTabs;
simpleTables.isTSV = isTSV;
simpleTables.numTabs = numTabs;

if (typeof module != 'undefined')
  module.exports = simpleTables;
else
  root.simpleTables = simpleTables;
})(this);
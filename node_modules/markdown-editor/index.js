(function(root) {
  
var original = '';
var Backbone = root.Backbone || require('backbone');
var marked = root.marked || require('marked'),
    JsDiff = root.JsDiff || require('diff'),
    simpleTables = root.simpleTables || require('simple-markdown-tables'),
    listTypes = root.listTypes || require('markdown-list-types'),
    _ = root._ || require('underscore');

var text_events;
if (root.window && window.document)
  text_events = document.createEvent('TextEvent').initTextEvent;

if (root._) 
  _.str = root._.str;
else
  _.str = require('underscore.string');

marked.setOptions({'breaks': true, 'preserveNumbering': true});
simpleTables.TAB_SIZE = 4;

var editor_view = Backbone.View.extend({
  
  'events': {
    'keydown textarea': 'handleTabs',
    'keyup textarea': 'onChange',
    'input textarea': 'onChange',
    'paste textarea': 'onPaste',
    'shown .nav-tabs a': 'autoSize',
    'change input.wrapText': 'onWrapChange',
    'focus textarea': 'onTextFocus',
    'click .hide_editor': 'onHideClick'
  },
  
  'initialize': function initialize() {
    this.textarea = $('<textarea class="span12" id="' + this.cid + '" />');
    $(window).resize(this.autoSize.bind(this));
    this.original_text = this.options.original_text;
    var current_text = this.options.current_text || this.options.original_text;
    this.textarea.val(current_text);
  },

  'createTabLinks': function createTabLinks() {
    var tab_links = $('<ul class="nav nav-tabs" />');
    this.result_link = $('<a href="#result' + this.cid + '" data-toggle="tab">Preview</a>');
    this.diff_link = $('<a href="#diff' + this.cid + '" data-toggle="tab">Difference</a>');
    tab_links.append($('<li />').append(this.result_link));
    tab_links.append($('<li />').append(this.diff_link));
    tab_links.append(this.createHideLink());
    tab_links.append(this.createWrapCheckbox());
    return tab_links;
  },

  'createHideLink': function createHideLink() {
    var hide_link_container = $('<li />').css('float', 'right');
    var hide_link = $('<a class="hide_editor close" style="cursor: pointer">&times;</a>');
    hide_link_container.append(hide_link);
    return hide_link_container;
  },

  'createWrapCheckbox': function createWrapCheckbox() {
    var wrap_container = $('<li" />');
    var wrap_label = $('<label />');
    this.wrap_checkbox = $('<input type="checkbox" checked="checked" class="wrapText">');
    wrap_label.append(this.wrap_checkbox);
    wrap_label.append(' Wrap Text');
    wrap_container.css('float', 'right');
    return wrap_container.append(wrap_label);
  },

  'createTabContent': function createTabContent() {
    var tab_content = $('<div class="tab-content" />');
    this.result_tab = $('<div id="result' + this.cid + '" class="tab-pane table table-striped table-bordered"></div>');
    this.diff_tab = $('<div id="diff' + this.cid + '" class="tab-pane table table-striped table-bordered"></div>');
    tab_content.append(this.result_tab);
    tab_content.append(this.diff_tab);
    return tab_content;
  },
  
  'autoSize': function autoSize() {
    var $textarea = $(this.textarea);
    var borders = parseInt($textarea.css("borderTopWidth"), 10) + parseInt($textarea.css("borderBottomWidth"), 10);
    if ($textarea.outerHeight() < this.scrollHeight + borders)
      $textarea.height(250);

    var target = this.$('.tab-pane.active')[0];
    if (this.scrollHeight == this.clientHeight) {
      $(target).height('auto');
    }
    else {
      var scroll_diff = getScrollHeightDiff.apply(this);
      $(target).height(0);
      var target_borders = parseInt($(target).css("borderTopWidth"), 10) + parseInt($(target).css("borderBottomWidth"), 10);
      var target_padding = parseInt($(target).css("paddingTop"), 10) + parseInt($(target).css("paddingBottom"), 10);
      $(target).height(target.scrollHeight + target_borders - target_padding - scroll_diff);
      this.autoScroll();
    }
  },

  'onWrapChange': function onWrapChange() {
    if (this.wrap_checkbox.is(':checked'))
      this.textarea.removeAttr('wrap');
    else
      this.textarea.attr('wrap', 'off');
  },
  
  'autoScroll': function autoScroll() {
    var target = this.$('.tab-pane.active')[0];
    var scroll_percent = this.textarea.scrollTop / (this.textarea.scrollHeight - this.textarea.clientHeight);
    target.scrollTop = scroll_percent * (target.scrollHeight - target.clientHeight);
  },
  
  'getScrollHeightDiff': function getScrollHeightDiff() {
    var borders = parseInt($(this.textarea).css("borderTopWidth"), 10) + parseInt($(this.textarea).css("borderBottomWidth"), 10);
    var scroll_diff = this.textarea.scrollHeight + borders - $(this.textarea).outerHeight();
    if (scroll_diff > 0)
      return scroll_diff;
    return 0;
  },
  
  'handleTabs': function handleTabs(e) {
    if ((e.keyCode || e.which) != 9) return;
    e.preventDefault();

    var start = this.textarea.selectionStart;
    var val = $(this.textarea).val();
    $(this.textarea).val(val.slice(0, start) + '\t' + val.slice(this.textarea.selectionEnd));
    this.textarea.selectionStart = this.textarea.selectionEnd = start + 1;
  },
  
  'onPaste': function onPaste(evt) {
    var orig = this.textarea.val();
    setTimeout(function() {
      var current = $(this.textarea).val();
      var bounds = editor_view.getBoundsOfChange(orig, current);
      var pasted = current.slice(bounds.start, bounds.end);
      var processed = editor_view.processPastedText(pasted);
      if (processed == pasted)
        return;

      if (text_events) {
        updateTextarea(this.textarea, processed, bounds.start, bounds.end);
      }
      else {
        var merged = current.slice(0, bounds.start) + processed + current.slice(bounds.end);
        $(this.textarea).val(merged);
      }

      this.onChange();
    }.bind(this), 0);
  },
  
  'onChange': function onChange() {
    this.result_tab.html(editor_view.markdownToHTML(this.textarea.val()));
    this.createDiff();
    this.autoSize();
    this.trigger('change', this.textarea.val());
  },

  'createDiff': function createDiff() {
    var diff = JsDiff.diffWords(this.original_text, this.textarea.val());
    var fragment = document.createDocumentFragment();
    for (var i=0; i < diff.length; i++) {

      if (diff[i].added && diff[i + 1] && diff[i + 1].removed) {
        var swap = diff[i];
        diff[i] = diff[i + 1];
        diff[i + 1] = swap;
      }

      var node;
      if (diff[i].removed) {
        node = document.createElement('del');
        node.appendChild(document.createTextNode(diff[i].value));
      } else if (diff[i].added) {
        node = document.createElement('ins');
        node.appendChild(document.createTextNode(diff[i].value));
      } else {
        node = document.createTextNode(diff[i].value);
      }
      fragment.appendChild(node);
    }

    this.diff_tab.empty().append(fragment);
  },

  // TODO: update this to take start/end into account
  // & just update the pasted text
  'updateTextarea': function updateTextarea(textarea, text, start, end) {
    // don't break chrome's undo/redo: http://stackoverflow.com/questions/7553430
    var event = document.createEvent('TextEvent');
    textarea.select();
    textarea.selectionStart = start;
    textarea.selectionEnd = end;
    event.initTextEvent('textInput', true, true, null, text);
    textarea.dispatchEvent(event);
  },

  'onTextFocus': function() {
    this.$('.tab-container').slideDown();
  },

  'onHideClick': function() {
    this.$('.tab-container').slideUp();
  },

  'render': function render() {
    this.$el.append(this.textarea);
    var tab_container = $('<div />').css('display', 'none').addClass('tab-container');
    tab_container.append(this.createTabLinks());
    tab_container.append(this.createTabContent());
    this.$el.append(tab_container);
    this.onChange();
    this.$('div')
    this.$('.nav-tabs li:first').addClass('active');
    this.$('.tab-content > div:first').addClass('active');
    this.$('.tab-content > div').attr('style', 'height: auto;');
    return this;
  }
});

editor_view.processPastedText = function processPastedText(pasted_text) {
  var text = editor_view.normalizeNewLines(pasted_text);
  text = editor_view.insertMarkdownSeparatorLines(text);
  text = editor_view.handleWordLists(text);
  return simpleTables.alignColumns(text);
}

editor_view.normalizeNewLines = function normalizeNewLines(pasted_text) {
  return pasted_text.replace(/\r\n/g, '\n');
}

editor_view.insertMarkdownSeparatorLines = function insertMarkdownSeparatorLines(text) {
  var lines = text.split('\n');
  var previous_is_list, current_is_list, earliest_matching_index, output = [];
  var tab_counts = lines.map(function(line) { 
    return simpleTables.numTabs(line); 
  });
  var cur_tabs, prev_tabs, next_tabs, is_table, is_prev_table;

  lines.forEach(function(line, index) {
    current_is_list = editor_view.isList(line);

    // list starting/ending
    if (line && previous_is_list != null && previous_is_list != current_is_list)
      output.push('');
    
    // table starting ending
    if (!current_is_list) {
      cur_tabs = tab_counts[index];
      prev_tabs = tab_counts[index - 1];
      next_tabs = tab_counts[index + 1];
      is_table = cur_tabs && (prev_tabs == cur_tabs || next_tabs == cur_tabs);

      if (is_prev_table != null && is_table != is_prev_table)
        output.push('');
      is_prev_table = is_table;
    }

    output.push(line);
    previous_is_list = current_is_list;
  });
  
  return output.join('\n');
}

editor_view.handleWordLists = function handleWordLists(text) {
  var lines = text.split('\n');
  return lines.map(function(line) {
    bull_replacements.forEach(function(repl) {
      line = line.replace(repl[0], repl[1]);
    });
    return line;
  }).join('\n');
}

editor_view.isList = function isList(line) {
  return _(bull_replacements).any(function(item) {
    return item[0].test(line);
  });
}

var bull_replacements = [
  [/^(\d+)\.\t/, '$1. '],
  [/^([a-h])\.\t/, '\t$1. '],
  [/^([ivx]+)\.\t/, '\t\t$1. '], 
  [/^\u2022\t/, '* '],
  [/^o\t/, '\t* '],
  [/^\uf0a7\t/, '\t\t* ']
];

editor_view.getBoundsOfChange = function getBoundsOfChange(orig_text, new_text) {
  var orig_len = orig_text.length;
  var new_len = new_text.length;

  var start = 0;
  while (orig_text[start] == new_text[start] && start < orig_len)
    start++;
  
  var end = 1;
  while (orig_text[orig_len - end] == new_text[new_len - end] && end <= new_len - start && end <= orig_len - start)
    end++;

  return {'start': start, 'end': new_len - (end - 1)};
}

editor_view.markdownToHTML = function markdownToHTML(md) {
  return marked(listTypes(simpleTables(md)));
}

if (typeof require != 'undefined') {
  // todo: convert these to static methods so they can be tests
  //    ie: editor_view.getBoundsOfChange = function getBoundsOfChange () {...etc
  exports.getBoundsOfChange = editor_view.getBoundsOfChange;
  exports.markdownToHTML = editor_view.markdownToHTML;
  exports.insertMarkdownSeparatorLines = editor_view.insertMarkdownSeparatorLines;
  exports.editor_view = editor_view;
}
else {
  root.editor_view = editor_view;
}
})(this);